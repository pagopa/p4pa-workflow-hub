{
  "info": {
    "_postman_id": "48c6d08a-2f05-4490-8fdb-5368ded0153c",
    "name": "Workflow-Hub-e2e",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "21721488",
    "_collection_link": "https://universal-meadow-88424.postman.co/workspace/PAP4~e3834aae-c5da-4699-87c8-55cd8293d10e/collection/21721488-48c6d08a-2f05-4490-8fdb-5368ded0153c?action=share&source=collection_link&creator=21721488"
  },
  "item": [
    {
      "name": "00_login",
      "item": [
        {
          "name": "00_authtoken jwt",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm=instrumentPmMethod(pm);\r",
                  "\r",
                  "pm.test(\"MyPay - 01_authtoken - Responses with 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"MyPay - 01_authtoken jwt - Verify response body\", function () {\r",
                  "    let jsonResponse = pm.response.json();\r",
                  "\r",
                  "    pm.expect(jsonResponse).have.property(\"access_token\")\r",
                  "    pm.expect(jsonResponse).have.property(\"token_type\")\r",
                  "    pm.expect(jsonResponse).have.property(\"expires_in\")\r",
                  "});\r",
                  "\r",
                  "let jsonResponse = pm.response.json();\r",
                  "pm.collectionVariables.set(\"accessToken\", jsonResponse.access_token);\r",
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript",
                "packages": {}
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{p4paAuthBaseUrl}}/auth/token?client_id=piattaforma-unitaria&grant_type=urn:ietf:params:oauth:grant-type:token-exchange&subject_token={{tokenExchange_subjectToken}}&subject_issuer={{tokenExchange_issuer}}&scope=openid&subject_token_type=urn:ietf:params:oauth:token-type:jwt",
              "host": [
                "{{p4paAuthBaseUrl}}"
              ],
              "path": [
                "auth",
                "token"
              ],
              "query": [
                {
                  "key": "client_id",
                  "value": "piattaforma-unitaria"
                },
                {
                  "key": "grant_type",
                  "value": "urn:ietf:params:oauth:grant-type:token-exchange"
                },
                {
                  "key": "subject_token",
                  "value": "{{tokenExchange_subjectToken}}"
                },
                {
                  "key": "subject_issuer",
                  "value": "{{tokenExchange_issuer}}"
                },
                {
                  "key": "scope",
                  "value": "openid"
                },
                {
                  "key": "subject_token_type",
                  "value": "urn:ietf:params:oauth:token-type:jwt"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "DebtPosition",
      "item": [
        {
          "name": "01_createDpSync",
          "item": [
            {
              "name": "01_create_dp _sync",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm=instrumentPmMethod(pm);\r",
                      "\r",
                      "pm.test(\"Payhub - 01_create_dp_sync - Responses with 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Payhub - 01_create_dp_sync - Verify response body\", function () {\r",
                      "    let jsonResponse = pm.response.json();\r",
                      "\r",
                      "    pm.expect(jsonResponse).have.property(\"workflowId\")\r",
                      "});\r",
                      "\r",
                      "let jsonResponse = pm.response.json();\r",
                      "pm.collectionVariables.set(\"workflowId\", jsonResponse.workflowId);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function generateRandomNumber() {\r",
                      "    let randomNumber = '';\r",
                      "    for (let i = 0; i < 10; i++) {\r",
                      "        randomNumber += Math.floor(Math.random() * 10).toString();\r",
                      "    }\r",
                      "    return randomNumber;\r",
                      "}\r",
                      "\r",
                      "let randomNumber = generateRandomNumber();\r",
                      "\r",
                      "pm.collectionVariables.set(\"randomNumber\", randomNumber);\r",
                      "pm.collectionVariables.set(\"fiscalCode\", `AAAAAA69A45A602A`);\r",
                      "pm.collectionVariables.set(\"debtPositionId\", `${randomNumber}`);\r",
                      "pm.collectionVariables.set(\"organizationId\", `7780`);\r",
                      "pm.collectionVariables.set(\"debtPositionTypeOrgId\", `8077`);"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{accessToken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"debtPositionId\": {{debtPositionId}},\r\n  \"iupdOrg\": \"iupdOrg\",\r\n  \"description\": \"description\",\r\n  \"status\": \"TO_SYNC\",\r\n  \"debtPositionOrigin\": \"ORDINARY\",\r\n  \"ingestionFlowFileId\": 1,\r\n  \"ingestionFlowFileLineNumber\": 1,\r\n  \"organizationId\": {{organizationId}},\r\n  \"debtPositionTypeOrgId\": {{debtPositionTypeOrgId}},\r\n  \"notificationDate\": \"2024-05-15T10:30:00+02:00\",\r\n  \"validityDate\": \"2024-05-15T10:30:00+02:00\",\r\n  \"flagIuvVolatile\": false,\r\n  \"creationDate\": \"2024-05-15T10:30:00+02:00\",\r\n  \"updateDate\": \"2024-05-15T10:30:00+02:00\",\r\n  \"paymentOptions\": [\r\n    {\r\n      \"paymentOptionId\": 1,\r\n      \"debtPositionId\": 1,\r\n      \"totalAmountCents\": 1,\r\n      \"status\": \"TO_SYNC\",\r\n      \"multiDebtor\": false,\r\n      \"dueDate\": \"2024-05-15T10:30:00+02:00\",\r\n      \"description\": \"description\",\r\n      \"paymentOptionType\": \"DOWN_PAYMENT\",\r\n      \"installments\": [\r\n        {\r\n          \"installmentId\": 1,\r\n          \"paymentOptionId\": 1,\r\n          \"status\": \"TO_SYNC\",\r\n          \"syncStatus\": {\r\n            \"syncStatusFrom\": \"TO_SYNC\",\r\n            \"syncStatusTo\": \"TO_SYNC\"\r\n          },\r\n          \"iupdPagopa\": \"iupdPagopa\",\r\n          \"iud\": \"iud\",\r\n          \"iuv\": \"iuv\",\r\n          \"iur\": \"iur\",\r\n          \"iuf\": \"iuf\",\r\n          \"nav\": \"nav\",\r\n          \"dueDate\": \"2024-05-15T10:30:00+02:00\",\r\n          \"paymentTypeCode\": \"paymentTypeCode\",\r\n          \"amountCents\": 100,\r\n          \"notificationFeeCents\": 100,\r\n          \"remittanceInformation\": \"remittanceInformation\",\r\n          \"humanFriendlyRemittanceInformation\": \"humanFriendlyRemittanceInformation\",\r\n          \"balance\": \"balance\",\r\n          \"legacyPaymentMetadata\": \"legacyPaymentMetadata\",\r\n          \"debtor\": {\r\n            \"entityType\": \"F\",\r\n            \"fiscalCode\": \"{{fiscalCode}}\",\r\n            \"fullName\": \"fullName\",\r\n            \"address\": \"address\",\r\n            \"civic\": \"civic\",\r\n            \"postalCode\": \"postalCode\",\r\n            \"location\": \"location\",\r\n            \"province\": \"province\",\r\n            \"nation\": \"nation\",\r\n            \"email\": \"email@test.it\"\r\n          },\r\n          \"transfers\": [\r\n            {\r\n              \"transferId\": 1,\r\n              \"installmentId\": 1,\r\n              \"orgFiscalCode\": \"orgFiscalCode\",\r\n              \"orgName\": \"orgName\",\r\n              \"amountCents\": 100,\r\n              \"remittanceInformation\": \"remittanceInformation\",\r\n              \"stampType\": \"stampType\",\r\n              \"stampHashDocument\": \"stampHashDocument\",\r\n              \"stampProvincialResidence\": \"stampProvincialResidence\",\r\n              \"iban\": \"iban\",\r\n              \"postalIban\": \"postalIban\",\r\n              \"category\": \"category\",\r\n              \"transferIndex\": 1\r\n            }\r\n          ],\r\n          \"creationDate\": \"2024-05-15T10:30:00+02:00\",\r\n          \"updateDate\": \"2024-05-15T10:30:00+02:00\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{workflowHubBaseUrl}}/workflowhub/workflow/debt-position/sync",
                  "host": [
                    "{{workflowHubBaseUrl}}"
                  ],
                  "path": [
                    "workflowhub",
                    "workflow",
                    "debt-position"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "01_status_workflow",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm=instrumentPmMethod(pm);\r",
                      "\r",
                      "pm.test(\"Payhub - 01_status_workflow - Responses with 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(`Payhub - 01_status_workflow - Verify response body: Status = ${pm.response.json().status}`, function () {\r",
                      "    let jsonResponse = pm.response.json();\r",
                      "\r",
                      "    pm.expect(jsonResponse).have.property(\"workflowId\")\r",
                      "    pm.expect(jsonResponse).have.property(\"status\")\r",
                      "    pm.expect(jsonResponse.status).to.be.oneOf([\r",
                      "        \"WORKFLOW_EXECUTION_STATUS_COMPLETED\",\r",
                      "        \"WORKFLOW_EXECUTION_STATUS_RUNNING\"\r",
                      "    ]);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{accessToken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{workflowHubBaseUrl}}/workflowhub/workflows/{{workflowId}}/status",
                  "host": [
                    "{{workflowHubBaseUrl}}"
                  ],
                  "path": [
                    "workflowhub",
                    "workflows",
                    "{{workflowId}}",
                    "status"
                  ]
                }
              },
              "response": []
            }
          ]
        },
        {
          "name": "02_alignDpSyncAca",
          "item": [
            {
              "name": "02_align_dp_sync",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm=instrumentPmMethod(pm);\r",
                      "\r",
                      "pm.test(\"Payhub - 01_align_dp_sync - Responses with 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Payhub - 01_align_dp_sync - Verify response body\", function () {\r",
                      "    let jsonResponse = pm.response.json();\r",
                      "\r",
                      "    pm.expect(jsonResponse).have.property(\"workflowId\")\r",
                      "});\r",
                      "\r",
                      "let jsonResponse = pm.response.json();\r",
                      "pm.collectionVariables.set(\"workflowId\", jsonResponse.workflowId);\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "exec": [
                      "function generateRandomNumber() {\r",
                      "    let randomNumber = '';\r",
                      "    for (let i = 0; i < 10; i++) {\r",
                      "        randomNumber += Math.floor(Math.random() * 10).toString();\r",
                      "    }\r",
                      "    return randomNumber;\r",
                      "}\r",
                      "\r",
                      "let randomNumber = generateRandomNumber();\r",
                      "\r",
                      "pm.collectionVariables.set(\"randomNumber\", randomNumber);\r",
                      "pm.collectionVariables.set(\"fiscalCode\", `AAAAAA69A45A602A`);\r",
                      "pm.collectionVariables.set(\"debtPositionId\", `${randomNumber}`);\r",
                      "pm.collectionVariables.set(\"organizationId\", `7780`);\r",
                      "pm.collectionVariables.set(\"debtPositionTypeOrgId\", `8077`);"
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{accessToken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "POST",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"debtPositionId\": {{debtPositionId}},\r\n  \"iupdOrg\": \"iupdOrg\",\r\n  \"description\": \"description\",\r\n  \"status\": \"TO_SYNC\",\r\n  \"debtPositionOrigin\": \"ORDINARY\",\r\n  \"ingestionFlowFileId\": 1,\r\n  \"ingestionFlowFileLineNumber\": 1,\r\n  \"organizationId\": {{organizationId}},\r\n  \"debtPositionTypeOrgId\": {{debtPositionTypeOrgId}},\r\n  \"notificationDate\": \"2024-05-15T10:30:00+02:00\",\r\n  \"validityDate\": \"2024-05-15T10:30:00+02:00\",\r\n  \"flagIuvVolatile\": false,\r\n  \"creationDate\": \"2024-05-15T10:30:00+02:00\",\r\n  \"updateDate\": \"2024-05-15T10:30:00+02:00\",\r\n  \"paymentOptions\": [\r\n    {\r\n      \"paymentOptionId\": 1,\r\n      \"debtPositionId\": 1,\r\n      \"totalAmountCents\": 1,\r\n      \"status\": \"TO_SYNC\",\r\n      \"multiDebtor\": false,\r\n      \"dueDate\": \"2024-05-15T10:30:00+02:00\",\r\n      \"description\": \"description\",\r\n      \"paymentOptionType\": \"DOWN_PAYMENT\",\r\n      \"installments\": [\r\n        {\r\n          \"installmentId\": 1,\r\n          \"paymentOptionId\": 1,\r\n          \"status\": \"TO_SYNC\",\r\n          \"syncStatus\": {\r\n            \"syncStatusFrom\": \"TO_SYNC\",\r\n            \"syncStatusTo\": \"TO_SYNC\"\r\n          },\r\n          \"iupdPagopa\": \"iupdPagopa\",\r\n          \"iud\": \"iud\",\r\n          \"iuv\": \"iuv\",\r\n          \"iur\": \"iur\",\r\n          \"iuf\": \"iuf\",\r\n          \"nav\": \"nav\",\r\n          \"dueDate\": \"2024-05-15T10:30:00+02:00\",\r\n          \"paymentTypeCode\": \"paymentTypeCode\",\r\n          \"amountCents\": 100,\r\n          \"notificationFeeCents\": 100,\r\n          \"remittanceInformation\": \"remittanceInformation\",\r\n          \"humanFriendlyRemittanceInformation\": \"humanFriendlyRemittanceInformation\",\r\n          \"balance\": \"balance\",\r\n          \"legacyPaymentMetadata\": \"legacyPaymentMetadata\",\r\n          \"debtor\": {\r\n            \"entityType\": \"F\",\r\n            \"fiscalCode\": \"{{fiscalCode}}\",\r\n            \"fullName\": \"fullName\",\r\n            \"address\": \"address\",\r\n            \"civic\": \"civic\",\r\n            \"postalCode\": \"postalCode\",\r\n            \"location\": \"location\",\r\n            \"province\": \"province\",\r\n            \"nation\": \"nation\",\r\n            \"email\": \"email@test.it\"\r\n          },\r\n          \"transfers\": [\r\n            {\r\n              \"transferId\": 1,\r\n              \"installmentId\": 1,\r\n              \"orgFiscalCode\": \"orgFiscalCode\",\r\n              \"orgName\": \"orgName\",\r\n              \"amountCents\": 100,\r\n              \"remittanceInformation\": \"remittanceInformation\",\r\n              \"stampType\": \"stampType\",\r\n              \"stampHashDocument\": \"stampHashDocument\",\r\n              \"stampProvincialResidence\": \"stampProvincialResidence\",\r\n              \"iban\": \"iban\",\r\n              \"postalIban\": \"postalIban\",\r\n              \"category\": \"category\",\r\n              \"transferIndex\": 1\r\n            }\r\n          ],\r\n          \"creationDate\": \"2024-05-15T10:30:00+02:00\",\r\n          \"updateDate\": \"2024-05-15T10:30:00+02:00\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{workflowHubBaseUrl}}/workflowhub/workflow/debt-position/aca",
                  "host": [
                    "{{workflowHubBaseUrl}}"
                  ],
                  "path": [
                    "workflowhub",
                    "workflow",
                    "debt-position",
                    "aca"
                  ]
                }
              },
              "response": []
            },
            {
              "name": "02_status_workflow",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm=instrumentPmMethod(pm);\r",
                      "\r",
                      "pm.test(\"Payhub - 01_status_workflow - Responses with 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(`Payhub - 01_status_workflow - Verify response body: Status = ${pm.response.json().status}`, function () {\r",
                      "    let jsonResponse = pm.response.json();\r",
                      "\r",
                      "    pm.expect(jsonResponse).have.property(\"workflowId\")\r",
                      "    pm.expect(jsonResponse).have.property(\"status\")\r",
                      "    pm.expect(jsonResponse.status).to.be.oneOf([\r",
                      "        \"WORKFLOW_EXECUTION_STATUS_COMPLETED\",\r",
                      "        \"WORKFLOW_EXECUTION_STATUS_RUNNING\"\r",
                      "    ]);\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript",
                    "packages": {}
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "key": "token",
                      "value": "{{accessToken}}",
                      "type": "string"
                    }
                  ]
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{workflowHubBaseUrl}}/workflowhub/workflows/{{workflowId}}/status",
                  "host": [
                    "{{workflowHubBaseUrl}}"
                  ],
                  "path": [
                    "workflowhub",
                    "workflows",
                    "{{workflowId}}",
                    "status"
                  ]
                }
              },
              "response": []
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "packages": {},
        "exec": [
          "// START COMMON UTILITIES\r",
          "\r",
          "// global variable to use in order to skip tests\r",
          "skipTests=false;\r",
          "\r",
          "// method to be invoked as first thing inside tests in order to instrument the \"pm\" variable:\r",
          "// eg: pm = pm=instrumentPmMethod(pm);\r",
          "instrumentPmMethod = (pm) => {\r",
          "    const pmProxy = {\r",
          "        get: function(pm, key) {\r",
          "            if (key == 'test') {\r",
          "                return (skipTests ? pm.test.skip : pm.test);\r",
          "            }\r",
          "            return pm[key];\r",
          "        }\r",
          "    };\r",
          "\r",
          "    return new Proxy(pm, pmProxy);\r",
          "}\r",
          "\r",
          "// function to be used in order to retry the current request, configuring a maximum number of attempts and a fixed delay between each invoke\r",
          "retryRequest = (pm, setTimeout, waitingMillis = 1000, maxAttempts = 30) => {\r",
          "    if(!pm || !setTimeout){\r",
          "        throw new Error(\"Invalid invoke to retryRequest function! Some required parameters are undefined: pm=\" + pm + \", setTimeout=\" + setTimeout)\r",
          "    }\r",
          "\r",
          "    const retryVariableName = \"retry_\" + pm.info.requestId\r",
          "    const attempt = (pm.variables.get(retryVariableName) ?? 0) + 1;\r",
          "    if(attempt < maxAttempts) {\r",
          "        console.info(pm.info.requestName + \" not ready, retrying [attempt \" + attempt + \"/\" + maxAttempts + \"] after \" + waitingMillis + \" ms\");\r",
          "        pm.variables.set(retryVariableName, attempt)\r",
          "        pm.execution.setNextRequest(pm.info.requestId);\r",
          "        return setTimeout(()=>{}, waitingMillis);\r",
          "    } else {\r",
          "        pm.test(pm.info.requestName + \" not ready\", () => pm.expect.fail(attempt + \" attempts\"));\r",
          "    }\r",
          "}\r",
          "\r",
          "// function to be used in order to retry the current request until it returns a known response HTTP status code\r",
          "retryWhenStatusCode = (pm, setTimeout, statusCode, waitingMillis, maxAttempts) => {\r",
          "    if(pm.response.code == statusCode){\r",
          "        console.log(\"Obtained \" + statusCode + \"! Performing retry...\")\r",
          "        skipTests=true;\r",
          "        return retryRequest(pm, setTimeout, waitingMillis, maxAttempts)\r",
          "    }\r",
          "}\r",
          "\r",
          "// XML utilities\r",
          "xml2js = require('xml2js');\r",
          "\r",
          "parseXmlResponse = (response) => {\r",
          "    let body;\r",
          "    xml2js.parseString(response.text(), {\r",
          "            ignoreAttrs: true, \r",
          "            explicitArray: false,\r",
          "        }, function (err, result) {\r",
          "            if(err){\r",
          "                console.error(err)\r",
          "            }\r",
          "        body = result;\r",
          "    });\r",
          "    return body;\r",
          "};"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "accessToken",
      "value": ""
    },
    {
      "key": "workflowId",
      "value": ""
    },
    {
      "key": "fiscalCode",
      "value": ""
    },
    {
      "key": "randomNumber",
      "value": ""
    },
    {
      "key": "debtPositionId",
      "value": ""
    },
    {
      "key": "organizationId",
      "value": ""
    },
    {
      "key": "debtPositionTypeOrgId",
      "value": ""
    }
  ]
}
